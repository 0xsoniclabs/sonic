// Code generated by MockGen. DO NOT EDIT.
// Source: state_processor.go
//
// Generated by this command:
//
//	mockgen -source=state_processor.go -destination=state_processor_mock.go -package=evmcore
//

// Package evmcore is a generated GoMock package.
package evmcore

import (
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// Mock_transactionRunner is a mock of _transactionRunner interface.
type Mock_transactionRunner struct {
	ctrl     *gomock.Controller
	recorder *Mock_transactionRunnerMockRecorder
	isgomock struct{}
}

// Mock_transactionRunnerMockRecorder is the mock recorder for Mock_transactionRunner.
type Mock_transactionRunnerMockRecorder struct {
	mock *Mock_transactionRunner
}

// NewMock_transactionRunner creates a new mock instance.
func NewMock_transactionRunner(ctrl *gomock.Controller) *Mock_transactionRunner {
	mock := &Mock_transactionRunner{ctrl: ctrl}
	mock.recorder = &Mock_transactionRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mock_transactionRunner) EXPECT() *Mock_transactionRunnerMockRecorder {
	return m.recorder
}

// runRegularTransaction mocks base method.
func (m *Mock_transactionRunner) runRegularTransaction(ctxt *runContext, tx *types.Transaction, txIndex int) ProcessedTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "runRegularTransaction", ctxt, tx, txIndex)
	ret0, _ := ret[0].(ProcessedTransaction)
	return ret0
}

// runRegularTransaction indicates an expected call of runRegularTransaction.
func (mr *Mock_transactionRunnerMockRecorder) runRegularTransaction(ctxt, tx, txIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "runRegularTransaction", reflect.TypeOf((*Mock_transactionRunner)(nil).runRegularTransaction), ctxt, tx, txIndex)
}

// Mock_evm is a mock of _evm interface.
type Mock_evm struct {
	ctrl     *gomock.Controller
	recorder *Mock_evmMockRecorder
	isgomock struct{}
}

// Mock_evmMockRecorder is the mock recorder for Mock_evm.
type Mock_evmMockRecorder struct {
	mock *Mock_evm
}

// NewMock_evm creates a new mock instance.
func NewMock_evm(ctrl *gomock.Controller) *Mock_evm {
	mock := &Mock_evm{ctrl: ctrl}
	mock.recorder = &Mock_evmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mock_evm) EXPECT() *Mock_evmMockRecorder {
	return m.recorder
}

// runTransaction mocks base method.
func (m *Mock_evm) runTransaction(arg0 *runContext, arg1 *types.Transaction, arg2 int) ProcessedTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "runTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(ProcessedTransaction)
	return ret0
}

// runTransaction indicates an expected call of runTransaction.
func (mr *Mock_evmMockRecorder) runTransaction(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "runTransaction", reflect.TypeOf((*Mock_evm)(nil).runTransaction), arg0, arg1, arg2)
}

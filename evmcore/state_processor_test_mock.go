// Code generated by MockGen. DO NOT EDIT.
// Source: state_processor_test.go
//
// Generated by this command:
//
//	mockgen -source=state_processor_test.go -destination=state_processor_test_mock.go -package=evmcore
//

// Package evmcore is a generated GoMock package.
package evmcore

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	core "github.com/ethereum/go-ethereum/core"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// Mock_txRunner is a mock of _txRunner interface.
type Mock_txRunner struct {
	ctrl     *gomock.Controller
	recorder *Mock_txRunnerMockRecorder
	isgomock struct{}
}

// Mock_txRunnerMockRecorder is the mock recorder for Mock_txRunner.
type Mock_txRunnerMockRecorder struct {
	mock *Mock_txRunner
}

// NewMock_txRunner creates a new mock instance.
func NewMock_txRunner(ctrl *gomock.Controller) *Mock_txRunner {
	mock := &Mock_txRunner{ctrl: ctrl}
	mock.recorder = &Mock_txRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mock_txRunner) EXPECT() *Mock_txRunnerMockRecorder {
	return m.recorder
}

// run mocks base method.
func (m *Mock_txRunner) run(arg0 *core.Message, arg1 *types.Transaction) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "run", arg0, arg1)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// run indicates an expected call of run.
func (mr *Mock_txRunnerMockRecorder) run(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*Mock_txRunner)(nil).run), arg0, arg1)
}

// MockSigner is a mock of Signer interface.
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
	isgomock struct{}
}

// MockSignerMockRecorder is the mock recorder for MockSigner.
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance.
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// ChainID mocks base method.
func (m *MockSigner) ChainID() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// ChainID indicates an expected call of ChainID.
func (mr *MockSignerMockRecorder) ChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockSigner)(nil).ChainID))
}

// Equal mocks base method.
func (m *MockSigner) Equal(arg0 types.Signer) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockSignerMockRecorder) Equal(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockSigner)(nil).Equal), arg0)
}

// Hash mocks base method.
func (m *MockSigner) Hash(tx *types.Transaction) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", tx)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockSignerMockRecorder) Hash(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockSigner)(nil).Hash), tx)
}

// Sender mocks base method.
func (m *MockSigner) Sender(tx *types.Transaction) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sender", tx)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sender indicates an expected call of Sender.
func (mr *MockSignerMockRecorder) Sender(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sender", reflect.TypeOf((*MockSigner)(nil).Sender), tx)
}

// SignatureValues mocks base method.
func (m *MockSigner) SignatureValues(tx *types.Transaction, sig []byte) (*big.Int, *big.Int, *big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignatureValues", tx, sig)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(*big.Int)
	ret2, _ := ret[2].(*big.Int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SignatureValues indicates an expected call of SignatureValues.
func (mr *MockSignerMockRecorder) SignatureValues(tx, sig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignatureValues", reflect.TypeOf((*MockSigner)(nil).SignatureValues), tx, sig)
}

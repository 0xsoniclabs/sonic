// Code generated by MockGen. DO NOT EDIT.
// Source: tx_pool_subsidies_test.go
//
// Generated by this command:
//
//	mockgen -source=tx_pool_subsidies_test.go -destination=tx_pool_subsidies_test_mock.go -package=evmcore
//

// Package evmcore is a generated GoMock package.
package evmcore

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mocksubscriber is a mock of subscriber interface.
type Mocksubscriber struct {
	ctrl     *gomock.Controller
	recorder *MocksubscriberMockRecorder
	isgomock struct{}
}

// MocksubscriberMockRecorder is the mock recorder for Mocksubscriber.
type MocksubscriberMockRecorder struct {
	mock *Mocksubscriber
}

// NewMocksubscriber creates a new mock instance.
func NewMocksubscriber(ctrl *gomock.Controller) *Mocksubscriber {
	mock := &Mocksubscriber{ctrl: ctrl}
	mock.recorder = &MocksubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksubscriber) EXPECT() *MocksubscriberMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *Mocksubscriber) Err() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MocksubscriberMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*Mocksubscriber)(nil).Err))
}

// Unsubscribe mocks base method.
func (m *Mocksubscriber) Unsubscribe() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe")
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MocksubscriberMockRecorder) Unsubscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*Mocksubscriber)(nil).Unsubscribe))
}

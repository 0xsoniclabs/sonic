// Code generated by MockGen. DO NOT EDIT.
// Source: subsidies_integration.go
//
// Generated by this command:
//
//	mockgen -source=subsidies_integration.go -destination=subsidies_integration_mock.go -package=evmcore
//

// Package evmcore is a generated GoMock package.
package evmcore

import (
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockSubsidiesChecker is a mock of SubsidiesChecker interface.
type MockSubsidiesChecker struct {
	ctrl     *gomock.Controller
	recorder *MockSubsidiesCheckerMockRecorder
	isgomock struct{}
}

// MockSubsidiesCheckerMockRecorder is the mock recorder for MockSubsidiesChecker.
type MockSubsidiesCheckerMockRecorder struct {
	mock *MockSubsidiesChecker
}

// NewMockSubsidiesChecker creates a new mock instance.
func NewMockSubsidiesChecker(ctrl *gomock.Controller) *MockSubsidiesChecker {
	mock := &MockSubsidiesChecker{ctrl: ctrl}
	mock.recorder = &MockSubsidiesCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubsidiesChecker) EXPECT() *MockSubsidiesCheckerMockRecorder {
	return m.recorder
}

// isSponsored mocks base method.
func (m *MockSubsidiesChecker) isSponsored(tx *types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isSponsored", tx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isSponsored indicates an expected call of isSponsored.
func (mr *MockSubsidiesCheckerMockRecorder) isSponsored(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSponsored", reflect.TypeOf((*MockSubsidiesChecker)(nil).isSponsored), tx)
}

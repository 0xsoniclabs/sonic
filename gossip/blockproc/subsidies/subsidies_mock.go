// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/0xsoniclabs/sonic/gossip/blockproc/subsidies (interfaces: VirtualMachine,NonceSource,signer)
//
// Generated by this command:
//
//	mockgen -destination subsidies_mock.go -package subsidies . VirtualMachine,NonceSource,signer
//

// Package subsidies is a generated GoMock package.
package subsidies

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	uint256 "github.com/holiman/uint256"
	gomock "go.uber.org/mock/gomock"
)

// MockVirtualMachine is a mock of VirtualMachine interface.
type MockVirtualMachine struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineMockRecorder
	isgomock struct{}
}

// MockVirtualMachineMockRecorder is the mock recorder for MockVirtualMachine.
type MockVirtualMachineMockRecorder struct {
	mock *MockVirtualMachine
}

// NewMockVirtualMachine creates a new mock instance.
func NewMockVirtualMachine(ctrl *gomock.Controller) *MockVirtualMachine {
	mock := &MockVirtualMachine{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachine) EXPECT() *MockVirtualMachineMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockVirtualMachine) Call(from, to common.Address, input []byte, gas uint64, value *uint256.Int) ([]byte, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", from, to, input, gas, value)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Call indicates an expected call of Call.
func (mr *MockVirtualMachineMockRecorder) Call(from, to, input, gas, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockVirtualMachine)(nil).Call), from, to, input, gas, value)
}

// MockNonceSource is a mock of NonceSource interface.
type MockNonceSource struct {
	ctrl     *gomock.Controller
	recorder *MockNonceSourceMockRecorder
	isgomock struct{}
}

// MockNonceSourceMockRecorder is the mock recorder for MockNonceSource.
type MockNonceSourceMockRecorder struct {
	mock *MockNonceSource
}

// NewMockNonceSource creates a new mock instance.
func NewMockNonceSource(ctrl *gomock.Controller) *MockNonceSource {
	mock := &MockNonceSource{ctrl: ctrl}
	mock.recorder = &MockNonceSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonceSource) EXPECT() *MockNonceSourceMockRecorder {
	return m.recorder
}

// GetNonce mocks base method.
func (m *MockNonceSource) GetNonce(addr common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", addr)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockNonceSourceMockRecorder) GetNonce(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockNonceSource)(nil).GetNonce), addr)
}

// Mocksigner is a mock of signer interface.
type Mocksigner struct {
	ctrl     *gomock.Controller
	recorder *MocksignerMockRecorder
	isgomock struct{}
}

// MocksignerMockRecorder is the mock recorder for Mocksigner.
type MocksignerMockRecorder struct {
	mock *Mocksigner
}

// NewMocksigner creates a new mock instance.
func NewMocksigner(ctrl *gomock.Controller) *Mocksigner {
	mock := &Mocksigner{ctrl: ctrl}
	mock.recorder = &MocksignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksigner) EXPECT() *MocksignerMockRecorder {
	return m.recorder
}

// ChainID mocks base method.
func (m *Mocksigner) ChainID() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// ChainID indicates an expected call of ChainID.
func (mr *MocksignerMockRecorder) ChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*Mocksigner)(nil).ChainID))
}

// Equal mocks base method.
func (m *Mocksigner) Equal(arg0 types.Signer) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MocksignerMockRecorder) Equal(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*Mocksigner)(nil).Equal), arg0)
}

// Hash mocks base method.
func (m *Mocksigner) Hash(tx *types.Transaction) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", tx)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MocksignerMockRecorder) Hash(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*Mocksigner)(nil).Hash), tx)
}

// Sender mocks base method.
func (m *Mocksigner) Sender(tx *types.Transaction) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sender", tx)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sender indicates an expected call of Sender.
func (mr *MocksignerMockRecorder) Sender(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sender", reflect.TypeOf((*Mocksigner)(nil).Sender), tx)
}

// SignatureValues mocks base method.
func (m *Mocksigner) SignatureValues(tx *types.Transaction, sig []byte) (*big.Int, *big.Int, *big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignatureValues", tx, sig)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(*big.Int)
	ret2, _ := ret[2].(*big.Int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SignatureValues indicates an expected call of SignatureValues.
func (mr *MocksignerMockRecorder) SignatureValues(tx, sig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignatureValues", reflect.TypeOf((*Mocksigner)(nil).SignatureValues), tx, sig)
}

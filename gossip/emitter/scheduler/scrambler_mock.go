// Code generated by MockGen. DO NOT EDIT.
// Source: scrambler.go
//
// Generated by this command:
//
//	mockgen -source=scrambler.go -destination=scrambler_mock.go -package=scheduler
//

// Package scheduler is a generated GoMock package.
package scheduler

import (
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// Mockscrambler is a mock of scrambler interface.
type Mockscrambler struct {
	ctrl     *gomock.Controller
	recorder *MockscramblerMockRecorder
}

// MockscramblerMockRecorder is the mock recorder for Mockscrambler.
type MockscramblerMockRecorder struct {
	mock *Mockscrambler
}

// NewMockscrambler creates a new mock instance.
func NewMockscrambler(ctrl *gomock.Controller) *Mockscrambler {
	mock := &Mockscrambler{ctrl: ctrl}
	mock.recorder = &MockscramblerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockscrambler) EXPECT() *MockscramblerMockRecorder {
	return m.recorder
}

// scramble mocks base method.
func (m *Mockscrambler) scramble(arg0 []*types.Transaction) []*types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "scramble", arg0)
	ret0, _ := ret[0].([]*types.Transaction)
	return ret0
}

// scramble indicates an expected call of scramble.
func (mr *MockscramblerMockRecorder) scramble(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "scramble", reflect.TypeOf((*Mockscrambler)(nil).scramble), arg0)
}

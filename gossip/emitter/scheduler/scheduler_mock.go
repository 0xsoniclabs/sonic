// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go
//
// Generated by this command:
//
//	mockgen -source=scheduler.go -destination=scheduler_mock.go -package=scheduler
//

// Package scheduler is a generated GoMock package.
package scheduler

import (
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockPrioritizedTransactions is a mock of PrioritizedTransactions interface.
type MockPrioritizedTransactions struct {
	ctrl     *gomock.Controller
	recorder *MockPrioritizedTransactionsMockRecorder
}

// MockPrioritizedTransactionsMockRecorder is the mock recorder for MockPrioritizedTransactions.
type MockPrioritizedTransactionsMockRecorder struct {
	mock *MockPrioritizedTransactions
}

// NewMockPrioritizedTransactions creates a new mock instance.
func NewMockPrioritizedTransactions(ctrl *gomock.Controller) *MockPrioritizedTransactions {
	mock := &MockPrioritizedTransactions{ctrl: ctrl}
	mock.recorder = &MockPrioritizedTransactionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrioritizedTransactions) EXPECT() *MockPrioritizedTransactionsMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockPrioritizedTransactions) Accept() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Accept")
}

// Accept indicates an expected call of Accept.
func (mr *MockPrioritizedTransactionsMockRecorder) Accept() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockPrioritizedTransactions)(nil).Accept))
}

// Current mocks base method.
func (m *MockPrioritizedTransactions) Current() *types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(*types.Transaction)
	return ret0
}

// Current indicates an expected call of Current.
func (mr *MockPrioritizedTransactionsMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockPrioritizedTransactions)(nil).Current))
}

// Skip mocks base method.
func (m *MockPrioritizedTransactions) Skip() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Skip")
}

// Skip indicates an expected call of Skip.
func (mr *MockPrioritizedTransactionsMockRecorder) Skip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockPrioritizedTransactions)(nil).Skip))
}

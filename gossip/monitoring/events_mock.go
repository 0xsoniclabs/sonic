// Code generated by MockGen. DO NOT EDIT.
// Source: events.go
//
// Generated by this command:
//
//	mockgen -source=events.go -destination=events_mock.go -package=monitoring
//

// Package monitoring is a generated GoMock package.
package monitoring

import (
	reflect "reflect"

	hash "github.com/Fantom-foundation/lachesis-base/hash"
	gomock "go.uber.org/mock/gomock"
)

// MockEventMonitor is a mock of EventMonitor interface.
type MockEventMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockEventMonitorMockRecorder
	isgomock struct{}
}

// MockEventMonitorMockRecorder is the mock recorder for MockEventMonitor.
type MockEventMonitorMockRecorder struct {
	mock *MockEventMonitor
}

// NewMockEventMonitor creates a new mock instance.
func NewMockEventMonitor(ctrl *gomock.Controller) *MockEventMonitor {
	mock := &MockEventMonitor{ctrl: ctrl}
	mock.recorder = &MockEventMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventMonitor) EXPECT() *MockEventMonitorMockRecorder {
	return m.recorder
}

// OnIncomingEvent mocks base method.
func (m *MockEventMonitor) OnIncomingEvent(arg0 hash.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnIncomingEvent", arg0)
}

// OnIncomingEvent indicates an expected call of OnIncomingEvent.
func (mr *MockEventMonitorMockRecorder) OnIncomingEvent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnIncomingEvent", reflect.TypeOf((*MockEventMonitor)(nil).OnIncomingEvent), arg0)
}

// OnOutgoingEvent mocks base method.
func (m *MockEventMonitor) OnOutgoingEvent(arg0 hash.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnOutgoingEvent", arg0)
}

// OnOutgoingEvent indicates an expected call of OnOutgoingEvent.
func (mr *MockEventMonitorMockRecorder) OnOutgoingEvent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnOutgoingEvent", reflect.TypeOf((*MockEventMonitor)(nil).OnOutgoingEvent), arg0)
}

// MockcounterMetric is a mock of counterMetric interface.
type MockcounterMetric struct {
	ctrl     *gomock.Controller
	recorder *MockcounterMetricMockRecorder
	isgomock struct{}
}

// MockcounterMetricMockRecorder is the mock recorder for MockcounterMetric.
type MockcounterMetricMockRecorder struct {
	mock *MockcounterMetric
}

// NewMockcounterMetric creates a new mock instance.
func NewMockcounterMetric(ctrl *gomock.Controller) *MockcounterMetric {
	mock := &MockcounterMetric{ctrl: ctrl}
	mock.recorder = &MockcounterMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcounterMetric) EXPECT() *MockcounterMetricMockRecorder {
	return m.recorder
}

// Inc mocks base method.
func (m *MockcounterMetric) Inc(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inc", arg0)
}

// Inc indicates an expected call of Inc.
func (mr *MockcounterMetricMockRecorder) Inc(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockcounterMetric)(nil).Inc), arg0)
}

// MockvalueMetric is a mock of valueMetric interface.
type MockvalueMetric struct {
	ctrl     *gomock.Controller
	recorder *MockvalueMetricMockRecorder
	isgomock struct{}
}

// MockvalueMetricMockRecorder is the mock recorder for MockvalueMetric.
type MockvalueMetricMockRecorder struct {
	mock *MockvalueMetric
}

// NewMockvalueMetric creates a new mock instance.
func NewMockvalueMetric(ctrl *gomock.Controller) *MockvalueMetric {
	mock := &MockvalueMetric{ctrl: ctrl}
	mock.recorder = &MockvalueMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockvalueMetric) EXPECT() *MockvalueMetricMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockvalueMetric) Update(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *MockvalueMetricMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockvalueMetric)(nil).Update), arg0)
}

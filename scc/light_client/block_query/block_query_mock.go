// Code generated by MockGen. DO NOT EDIT.
// Source: block_query.go

// Package blockquery is a generated GoMock package.
package blockquery

import (
	reflect "reflect"

	idx "github.com/0xsoniclabs/consensus/inter/idx"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockBlockQueryI is a mock of BlockQueryI interface.
type MockBlockQueryI struct {
	ctrl     *gomock.Controller
	recorder *MockBlockQueryIMockRecorder
}

// MockBlockQueryIMockRecorder is the mock recorder for MockBlockQueryI.
type MockBlockQueryIMockRecorder struct {
	mock *MockBlockQueryI
}

// NewMockBlockQueryI creates a new mock instance.
func NewMockBlockQueryI(ctrl *gomock.Controller) *MockBlockQueryI {
	mock := &MockBlockQueryI{ctrl: ctrl}
	mock.recorder = &MockBlockQueryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockQueryI) EXPECT() *MockBlockQueryIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBlockQueryI) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBlockQueryIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBlockQueryI)(nil).Close))
}

// GetAddressInfo mocks base method.
func (m *MockBlockQueryI) GetAddressInfo(address common.Address, height idx.Block) (ProofQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressInfo", address, height)
	ret0, _ := ret[0].(ProofQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressInfo indicates an expected call of GetAddressInfo.
func (mr *MockBlockQueryIMockRecorder) GetAddressInfo(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressInfo", reflect.TypeOf((*MockBlockQueryI)(nil).GetAddressInfo), address, height)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: signer.go
//
// Generated by this command:
//
//	mockgen -source=signer.go -destination=signer_mock.go -package=valkeystore
//

// Package valkeystore is a generated GoMock package.
package valkeystore

import (
	reflect "reflect"

	validatorpk "github.com/0xsoniclabs/sonic/inter/validatorpk"
	gomock "go.uber.org/mock/gomock"
)

// MockSignerI is a mock of SignerI interface.
type MockSignerI struct {
	ctrl     *gomock.Controller
	recorder *MockSignerIMockRecorder
}

// MockSignerIMockRecorder is the mock recorder for MockSignerI.
type MockSignerIMockRecorder struct {
	mock *MockSignerI
}

// NewMockSignerI creates a new mock instance.
func NewMockSignerI(ctrl *gomock.Controller) *MockSignerI {
	mock := &MockSignerI{ctrl: ctrl}
	mock.recorder = &MockSignerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignerI) EXPECT() *MockSignerIMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockSignerI) Sign(pubkey validatorpk.PubKey, digest []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", pubkey, digest)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSignerIMockRecorder) Sign(pubkey, digest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSignerI)(nil).Sign), pubkey, digest)
}

// MockSignerAuthority is a mock of SignerAuthority interface.
type MockSignerAuthority struct {
	ctrl     *gomock.Controller
	recorder *MockSignerAuthorityMockRecorder
}

// MockSignerAuthorityMockRecorder is the mock recorder for MockSignerAuthority.
type MockSignerAuthorityMockRecorder struct {
	mock *MockSignerAuthority
}

// NewMockSignerAuthority creates a new mock instance.
func NewMockSignerAuthority(ctrl *gomock.Controller) *MockSignerAuthority {
	mock := &MockSignerAuthority{ctrl: ctrl}
	mock.recorder = &MockSignerAuthorityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignerAuthority) EXPECT() *MockSignerAuthorityMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockSignerAuthority) Sign(digest []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", digest)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSignerAuthorityMockRecorder) Sign(digest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSignerAuthority)(nil).Sign), digest)
}
